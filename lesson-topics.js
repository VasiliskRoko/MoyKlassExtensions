// ==UserScript==
// @name         Мой Класс - Темы занятий
// @namespace    http://tampermonkey.net/
// @version      25.0108
// @description  (=⌒‿‿⌒=)
// @author       Егор
// @match        https://app.moyklass.com/*
// @updateURL    https://raw.githubusercontent.com/VasiliskRoko/MoyKlassExtensions/refs/heads/main/lesson-topics.js
// @downloadURL  https://raw.githubusercontent.com/VasiliskRoko/MoyKlassExtensions/refs/heads/main/lesson-topics.js
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Функция, которая будет вызвана при нажатии на кнопку
    function openTopicsModalWindow() {
        // Массив с нужными значениями aria-label
        const labels = ['П-2', 'П-3', 'П-4', 'П-5', 'П-6', 'П-7', 'Р-0', 'Р-1', 'Р-2', 'Р-3', 'Р-4', 'Р-5'];

        // Словарь с темами
        const topics = { 
            "Р-0": [
                "Урок 1. Знакомство с конструктором Lego 'Первые механизмы'",
                "Урок 2. Гофр",
                "Урок 3. Тележка с попкорном",
                "Урок 4. Машинка",
                "Урок 5. Тачка",
                "Урок 6. Катапульта",
                "Урок 7. Шлагбаум",
                "Урок 8. Землетрясение",
                "Урок 9. Подъёмный мост",
                "Урок 10. Завершающее",
                "Урок 11. Цветок",
                "Урок 12. Мельница",
                "Урок 13. Подводная лодка",
                "Урок 14. Таран",
                "Урок 15. Самолёт",
                "Урок 16. Спутник",
                "Урок 17. Вратарь",
                "Урок 18. Стрекоза",
                "Урок 19. Турникет",
                "Урок 20. Танцующий робот",
                "Урок 21. Карусель",
                "Урок 22. Дракон",
                "Урок 23. Машинка",
                "Урок 24. Шлагбаум",
                "Урок 25. Том и Джерри",
                "Урок 26. Катер",
                "Урок 27. Спасательный вертолёт",
                "Урок 28. Жираф",
                "Урок 29. Краб",
                "Урок 30. Обезьянка"
            ],
            "Р-1": [
                "Урок 1. Знакомство с конструктором Lego WeDo 2.0. Сборка и программирование модели 'Кот путешественник'",
                "Урок 2. Сборка и программирование модели 'Повар'",
                "Урок 3. Сборка и программирование модели 'Турист'",
                "Урок 4. Сборка и программирование модели 'Аэроплан'",
                "Урок 5. Сборка и программирование модели 'Лыжник'",
                "Урок 6. Сборка и программирование модели 'Тукан'",
                "Урок 7. Сборка и программирование модели 'Лев'",
                "Урок 8. Сборка и программирование модели 'Монстр-трак'",
                "Урок 9. Сборка и программирование модели 'Пчела'",
                "Урок 10. Сборка и программирование модели 'Радио'",
                "Урок 11. Сборка и программирование модели 'Грузовик'",
                "Урок 12. Сборка и программирование модели 'Вертолет'",
                "Урок 13. Сборка и программирование модели 'Дорожный каток'",
                "Урок 14. Сборка и программирование модели 'Вентилятор'",
                "Урок 15. Сборка и программирование модели 'Спорткар'",
                "Урок 16. Сборка и программирование модели 'Трактор'",
                "Урок 17. Сборка и программирование модели 'Самолет'",
                "Урок 18. Сборка и программирование модели 'Моторная лодка'",
                "Урок 19. Сборка и программирование модели 'Багги'",
                "Урок 20. Сборка и программирование модели 'Драгстер'",
                "Урок 21. Сборка и программирование модели 'Корабль'",
                "Урок 22. Сборка и программирование модели 'Робособака'",
                "Урок 23. Сборка и программирование модели 'Комар'",
                "Урок 24. Сборка и программирование модели 'Крокодил'",
                "Урок 25. Сборка и программирование модели 'Птеродактиль'",
                "Урок 26. Сборка и программирование модели 'Родео'",
                "Урок 27. Сборка и программирование модели 'Рыбак'",
                "Урок 28. Сборка и программирование модели 'Кит'",
                "Урок 29. Сборка и программирование модели 'Саванна'",
                "Урок 30. Сборка и программирование модели 'Танцор'"
            ],
            "Р-2": [
                "Урок 1. Знакомство с конструктором Lego WeDo 2.0. Сборка и программирование модели 'Майло'",
                "Урок 2. Сборка и программирование модели 'Машина'",
                "Урок 3. Сборка и программирование модели 'Робот-дроид'",
                "Урок 4. Сборка и программирование модели 'Автономный автобус'",
                "Урок 5. Сборка и программирование модели 'Конвертоплан'",
                "Урок 6. Сборка и программирование модели 'Космический истребитель'",
                "Урок 7. Сборка и программирование модели 'Внедорожник'",
                "Урок 8. Сборка и программирование модели 'Транспортировщик'",
                "Урок 9. Сборка и программирование модели 'Гоночная машина'",
                "Урок 10. Сборка и программирование модели 'Погрузчик'",
                "Урок 11. Сборка и программирование модели 'Завропод'",
                "Урок 12. Сборка и программирование модели 'Диметродон'",
                "Урок 13. Сборка и программирование модели 'Плезиозавр'",
                "Урок 14. Сборка и программирование модели 'Миолания'",
                "Урок 15. Сборка и программирование модели 'Стегозавр'",
                "Урок 16. Сборка и программирование модели 'Меганевра'",
                "Урок 17. Сборка и программирование модели 'Паразавролофус'",
                "Урок 18. Сборка и программирование модели 'Трицератопс'",
                "Урок 19. Сборка и программирование модели 'Тираннозавр'",
                "Урок 20. Сборка и программирование модели 'Динозавр-Икс'",
                "Урок 21. Сборка и программирование модели 'Дракон «Беззубик»'",
                "Урок 22. Сборка и программирование модели 'Луноход-1'",
                "Урок 23. Сборка и программирование модели 'Луноход Lunar Cruiser'",
                "Урок 24. Сборка и программирование модели 'Пожарная автолестница'",
                "Урок 25. Сборка и программирование модели 'Автокран'",
                "Урок 26. Сборка и программирование модели 'Спиннер с пусковой установкой'",
                "Урок 27. Сборка и программирование модели 'Аттракцион дельфин'",
                "Урок 28. Сборка и программирование модели 'Вратарь'",
                "Урок 29. Сборка и программирование модели 'Вертолет «Летающий вагон»'",
                "Урок 30. Сборка и программирование модели 'Спасательный вертолет'"
            ],
            "Р-3": [
                "Урок 1. Знакомство с конструктором LEGO Mindstorms Education EV3",
                "Урок 2. Манипулятор, механическая передача",
                "Урок 3. Передаточные числа",
                "Урок 4. Изменение угла вращения",
                "Урок 5. Червячная передача",
                "Урок 6. Механизм с возвратно-поступательным движением",
                "Урок 7. Шагающий механизм",
                "Урок 8. Машущие крылья",
                "Урок 9. Ножничный подъёмник",
                "Урок 10. Собственный механизм",
                "Урок 11. Изучение среднего мотора и знакомство со средой программирования LEGO MINDSTORMS Education EV3",
                "Урок 12. Изучение большого мотора (градусы, секунды, обороты)",
                "Урок 13. Изучение большого мотора (два мотора одновременно)",
                "Урок 14. Изучение большого мотора (рулевое управление)",
                "Урок 15. Изучение большого мотора (независимое управление)",
                "Урок 16. Изучение понижающей зубчатой передачи",
                "Урок 17. Изучение повышающей зубчатой передачи",
                "Урок 18. Изучение гусеничной тяги",
                "Урок 19. Изучение гусеничной тяги (продолжение)",
                "Урок 20. Гонки",
                "Урок 21. Изучение датчика касания",
                "Урок 22. Изучение датчика касания (продолжение)",
                "Урок 23. Изучение кнопок управления модулем",
                "Урок 24. Изучение датчика цвета",
                "Урок 25. Изучение датчика цвета (продолжение)",
                "Урок 26. Музыкальная шкатулка",
                "Урок 27. Изучение ультразвукового датчика",
                "Урок 28. Изучение ультразвукового датчика (продолжение)",
                "Урок 29. Изучение гироскопического датчика",
                "Урок 30. Горилла"
            ],
            "Р-4": [
                "Урок 1. Повторение пройденного материала (датчик касания)",
                "Урок 2. Повторение пройденного материала (датчик цвета)",
                "Урок 3. Повторение пройденного материала (ультразвуковой датчик)",
                "Урок 4. Сборка и программирование модели 'Манипулятор'",
                "Урок 5. Сборка и программирование модели 'Конвейер'",
                "Урок 6. Соревнование 'Кегельринг' (подготовка)",
                "Урок 7. Соревнование 'Кегельринг' (финал)",
                "Урок 8. Сборка и программирование модели 'Мотоцикл'",
                "Урок 9. Сборка и программирование модели 'Грузоподъёмный кран'",
                "Урок 10. Робо-сумо (подготовка)",
                "Урок 11. Робо-сумо (финал)",
                "Урок 12. Вычислительные возможности роботов (часть 1)",
                "Урок 13. Вычислительные возможности роботов (часть 2)",
                "Урок 14. Сборка и программирование модели 'Счётчик шипов'",
                "Урок 15. Вычислительные возможности роботов (часть 3)",
                "Урок 16. Сборка и программирование модели 'Усовершенствованный конвейер'",
                "Урок 17. Сборка и программирование модели 'Венерина мухоловка'",
                "Урок 18. Движение по линии с одним датчиком цвета",
                "Урок 19. Движение по линии с двумя датчиками цвета",
                "Урок 20. Сборка и программирование модели 'Солнечные панели'",
                "Урок 21. Сборка и программирование модели 'Насекомое'",
                "Урок 22. Изучение пропорционального регулятора на примере одного датчика цвета",
                "Урок 23. Шорт-трек (подготовка)",
                "Урок 24. Шорт-трек (соревнование)",
                "Урок 25. Сборка и программирование модели 'Автономный шахтный робот'",
                "Урок 26. Траектория (начало)",
                "Урок 27. Траектория (закрепляем работу с правилом правой/левой руки)",
                "Урок 28. Траектория (продолжение)",
                "Урок 29. Траектория (финал)",
                "Урок 30. Робо-сумо"
            ],
            "Р-5": [
                "Урок 1. Знакомство с электронным конструктором Микроник",
                "Урок 2. Знакомство с комплектующими набора. Потенциометр. Конденсатор. Фоторезистор.",
                "Урок 3. Последовательное и параллельное соединение. Микросхема таймер 555.",
                "Урок 4. Транзистор. Переключатель. Микросхема NOR.",
                "Урок 5. Пьезодинамик. Микросхема таймер. Кнопка. Делаем мини игру.",
                "Урок 6. Знакомство с электричеством и платой Arduino UNO",
                "Урок 7. Эксперимент 'Светофор'",
                "Урок 8. Знакомство с потенциометром (эксперимент 'Светильник с управляемой яркостью')",
                "Урок 9. Знакомство со светодиодной шкалой (эксперимент 'Бегущий огонёк')",
                "Урок 10. Закрепляем работу с циклом for (светодиодная шкала)",
                "Урок 11. Знакомство с кнопками (условный оператор if)",
                "Урок 12. Закрепляем работу с кнопками (условный оператор if)",
                "Урок 13. Знакомство с пьезодинамиком",
                "Урок 14. Знакомство с семисегментным индикатором (проект 'Секундомер')",
                "Урок 15. Изучение RGB-светодиода",
                "Урок 16. Создаём игру 'Кнопочные ковбои'",
                "Урок 17. Изучение терморезистора",
                "Урок 18. Работа с выходным сдвиговым регистром",
                "Урок 19. Работа с мотором и полевым транзистором",
                "Урок 20. Изучение текстового экрана",
                "Урок 21. Изучение текстового экрана (2)",
                "Урок 22. Изучение фоторезистора",
                "Урок 23. Изучение текстового экрана (3)",
                "Урок 24. Изучение ультразвукового датчика",
                "Урок 25. Изучение ультразвукового датчика (2)",
                "Урок 26. Изучение матричной клавиатуры",
                "Урок 27. Кликер. Изучение матричной клавиатуры (3)",
                "Урок 28. Изучение датчика движения",
                "Урок 29. Изучение датчика движения (2)",
                "Урок 30. Работа с сервоприводом",
                "Урок 31. Создание игры 'Повтори комбинацию'"
            ],
            "П-2": [
                "Урок 1. Вводное занятие",
                "Урок 2. 'Художник: Последовательность'",
                "Урок 3. Роботы - исполнители команд. Робот Вертун",
                "Урок 4. Рассуждаем о программах",
                "Урок 5. Закрепление материала. Робот Ползун",
                "Урок 6. Изучение повторителей",
                "Урок 7. Закрепление. Подпрограммы",
                "Урок 8. Подпрограммы. Робот Тягун",
                "Урок 9. Вертун рисует буквы",
                "Урок 10. Тренируем роботов",
                "Урок 11. Команды для любопытных",
                "Урок 12. Волшебный кувшин",
                "Урок 13. Вводное занятие",
                "Урок 14. Знакомство с блоками из разделов «Движение» и «Внешний вид»",
                "Урок 15. Создание собственных спрайтов и фонов",
                "Урок 16. Знакомство с циклами",
                "Урок 17. Приключения Персика в космосе",
                "Урок 18. Знакомство с разделом «Звук»",
                "Урок 19. Работа с координатами",
                "Урок 20. Знакомство с разделом «Сенсоры» и изучение условного оператора",
                "Урок 21. Продвинутое изучение визуальных эффектов",
                "Урок 22. Летняя вечеринка",
                "Урок 23. Закрепление работы с координатами, изучение касаний",
                "Урок 24. Таймер и сообщения",
                "Урок 25. Закрепление работы с сообщениями",
                "Урок 26. Сообщения, эффекты.",
                "Урок 27. Новый город",
                "Урок 28. Сообщения, работа с костюмами",
                "Урок 29. Сообщения, переменные",
                "Урок 30. Переменные, создание клонов",
                "Урок 31. Движущийся фон"
            ],
            "П-3": [
                "Урок 1. Вводное занятие",
                "Урок 2. Художник",
                "Урок 3. Разработка проекта Кошки-мышки (часть 1)",
                "Урок 4. Разработка проекта Кошки-мышки (часть 2)",
                "Урок 5. Разработка проекта Танчики (часть 1)",
                "Урок 6. Разработка проекта Танчики (часть 2)",
                "Урок 7. Своя игра",
                "Урок 8. Разработка проекта Бомбёр (часть 1)",
                "Урок 9. Разработка проекта Бомбёр (часть 2)",
                "Урок 10. Разработка проекта Змейка",
                "Урок 11. Создаём игру 'Гонки на двоих'",
                "Урок 12. Своя игра",
                "Урок 13. Разработка игры 'Звёздные войны' (часть 1)",
                "Урок 14. Разработка игры 'Звёздные войны' (часть 2)",
                "Урок 15. Разработка проекта 'Художник'",
                "Урок 16. Доработка проекта 'Художник'",
                "Урок 17. Разработка игры 'Doodle Jump' (часть 1)",
                "Урок 18. Разработка игры 'Doodle Jump' (часть 2)",
                "Урок 19. Создание игры 'Арканоид'",
                "Урок 20. Своя игра",
                "Урок 21. Знакомство с визуальной средой программирования Kodu. Первые шаги",
                "Урок 22. Новые возможности для перемещения объектов и персонажей - пути. Создание клонов объектов.",
                "Урок 23. Изучение опции 'Родитель' и блока 'Таймер'",
                "Урок 24. Изучение новых функций 'Подсчет баллов' и 'Индикатор здоровья'",
                "Урок 25. Страницы. Восстановление здоровья. Управление клавиатурой.",
                "Урок 26. Создание игры 'Мини футбол'",
                "Урок 27. Создание игры 'Мини хоккей'",
                "Урок 28. Создание игры 'Гонки на выживание'",
                "Урок 29. Разработка игры симулятора 'Бродилка'",
                "Урок 30. Завершающее занятие на платформе Kodu Game Lab"
            ],
            "П-4": [
                "Урок 1. Вводное занятие",
                "Урок 2. Художник",
                "Урок 3. Базовый синтаксис",
                "Урок 4. Бесконечный цикл while True",
                "Урок 5. Переменные и уровень арены",
                "Урок 6. Игровая механика и изменение целей игры",
                "Урок 7. Изменение базовых характеристик персонажей и разработка финальной игры",
                "Урок 8. Работа с координатами, условный оператор if",
                "Урок 9. Условный оператор if-else",
                "Урок 10. Вложенный оператор if-else и понятие функции в программировании",
                "Урок 11. Использование аргумента в функции",
                "Урок 12. Использование нескольких аргументов в функциях",
                "Урок 13. Обработка событий в программировании (часть 1)",
                "Урок 14. Обработка событий в программировании (часть 2)",
                "Урок 15. Игровая механика: появление персонажей и цели игры",
                "Урок 16. Игровая механика: время, генератор случайных чисел, проигрыш",
                "Урок 17. Закрепление пройденного материала. Аркадная игра",
                "Урок 18. Конкатенация строк. Арифметические операции (часть 1)",
                "Урок 19. Арифметические операции (часть 2). Свойства объектов класса.",
                "Урок 20. Использование функций с оператором Return",
                "Урок 21. Оператор сравнения 'НЕ РАВНО'. Оператор алгебры логики 'ИЛИ'.",
                "Урок 22. Оператор алгебры логики 'И'.",
                "Урок 23. Относительность движения",
                "Урок 24. Работа с модулем 'Время'. Свойство здоровья",
                "Урок 25. Операторы Break и Continue",
                "Урок 26. И снова питомец! Новые события",
                "Урок 27. Финал Информатики 3. Углублённая разработка игр",
                "Урок 28. Разработка игры 'Runner', финал раздела",
                "Урок 29. Условный цикл while и массивы",
                "Урок 30. Вложенный условный цикл while"
            ],
            "П-5": [
                "Урок 1. Minecraft (вводный урок)",
                "Урок 2. Minecraft. Постройка блоков",
                "Урок 3. Minecraft. Цикл while",
                "Урок 4. Minecraft. Условный оператор",
                "Урок 5. Minecraft. Строим дом",
                "Урок 6. Основы работы с Python и PyCharm",
                "Урок 7. Знакомство с арифметическими операциями в Python",
                "Урок 8. Знакомство с типами данных в Python",
                "Урок 9. Работа с переменными в Python",
                "Урок 10. Работа с условным оператором в Python",
                "Урок 11. Работа с условным оператором в Python (часть 2)",
                "Урок 12. Работа с условным циклом в Python",
                "Урок 13. Знакомство с модулем 'Turtle'",
                "Урок 14. Знакомство с модулем 'Turtle' (часть 2)",
                "Урок 15. Знакомство с модулем 'Turtle' (часть 3). Функции",
                "Урок 16. Знакомство с циклом for и списками в Python",
                "Урок 17. Создание прототипа чат-бота (часть 1)",
                "Урок 18. Создание прототипа чат-бота (часть 2)",
                "Урок 19. Кодирование/декодирование информации",
                "Урок 20. Разработка игры 'Камень, ножницы, бумага'",
                "Урок 21. Знакомство с библиотекой Tkinter",
                "Урок 22. Библиотека Tkinter (виджет button)",
                "Урок 23. Закрепляем работу с виджетами button и label",
                "Урок 24. Библиотека Tkinter (метод grid и виджет entry)",
                "Урок 25. Закрепление работы с виджетом entry",
                "Урок 26. Закрепление пройденного материала на примере разработки программ",
                "Урок 27. Разработка программы 'Переводчик'",
                "Урок 28. Разработка программы 'Калькулятор' (часть 1)",
                "Урок 29. Разработка программы 'Калькулятор' (часть 2)",
                "Урок 30. Разработка программы 'Калькулятор' (финал)",
                "Урок 31. Разработка приложения 'Погода'",
                "Урок 32. Разработка игры 'Палочки'",
                "Урок 33. Разработка приложения 'Текстовый редактор'",
                "Урок 34. Разработка игры 'Поймай шарик'"
            ],
            "П-6": [
                "Урок 1. Питонтьютор (вводный урок)",
                "Урок 2. Питонтьютор. Условия",
                "Урок 3. Питонтьютор. Вычисления",
                "Урок 4. Питонтьютор. Цикл for",
                "Урок 5. Питонтьютор. Цикл while",
                "Урок 6. Основы объектно-ориентированного программирования в Python",
                "Урок 7. Основы объектно-ориентированного программирования в Python (часть 2)",
                "Урок 8. Наследование в объектно-ориентированном программировании",
                "Урок 9. Знакомство с библиотекой PyGame в Python",
                "Урок 10. Знакомство с библиотекой PyGame в Python (часть 2)",
                "Урок 11. Разработка игры 'Змейка' (часть 1)",
                "Урок 12. Разработка игры 'Змейка' (часть 2)",
                "Урок 13. Разработка игры 'Змейка' (часть 3)",
                "Урок 14. Разработка игры 'Змейка' (финал)",
                "Урок 15. Разработка игры 'Космическая битва' (спрайт игрока и управление)",
                "Урок 16. Разработка игры 'Космическая битва' (спрайты врагов)",
                "Урок 17. Разработка игры 'Космическая битва' (столкновения и стрельба)",
                "Урок 18. Разработка игры 'Космическая битва' (работа с графикой)",
                "Урок 19. Разработка игры 'Космическая битва' (улучшенные столкновения, вывод информации на экран)",
                "Урок 20. Разработка игры 'Космическая битва' (анимация спрайтов)",
                "Урок 21. Разработка игры 'Космическая битва' (звуки и музыка)",
                "Урок 22. Разработка игры 'Космическая битва' (здоровье игрока)",
                "Урок 23. Разработка игры 'Космическая битва' (авто-огонь и анимация взрывов метеоритов)",
                "Урок 24. Разработка игры 'Космическая битва' (анимация взрыва и жизни игрока)",
                "Урок 25. Разработка игры 'Космическая битва' (добавление бонуса - повышение здоровья)",
                "Урок 26. Разработка игры 'Космическая битва' (добавление бонуса - повышение атаки)",
                "Урок 27. Разработка игры 'Космическая битва' (добавление отрицательных бонусов)",
                "Урок 28. Разработка игры 'Космическая битва' (конец игры)",
                "Урок 29. Разработка игры 'Космическая битва' (условие выигрыша и проигрыша)",
                "Урок 30. Разработка игры 'Космическая битва' (финал)",
                "Урок 31. Создание меню игры",
                "Урок 32. Разработка игры Flappy Bird",
                "Урок 33. Разработка игры Flappy Bird. Графика игры. Жизни и очки.",
                "Урок 34. Разработка игры Flappy Bird. Сложность игры. Музыка. Доработка меню."
            ],
            "П-7": [
                "Урок 1. Знакомство с языком разметки HTML. Основные теги для создания html-страницы",
                "Урок 2. Основные теги форматирования текста",
                "Урок 3. Списки (маркированные, нумерованные), ссылки",
                "Урок 4. Вставка изображений, видео и аудио",
                "Урок 5. Новые теги структуры кода",
                "Урок 6. Знакомство с формальным языком описания внешнего вида документа CSS. Основы CSS",
                "Урок 7. Селекторы потомков. Псевдоклассы и псевдоэлементы",
                "Урок 8. Соседние и родственные селекторы",
                "Урок 9. Работа с текстом и цветом в CSS",
                "Урок 10. Практика (основы вёрстки HTML и свойства CSS)",
                "Урок 11. Работа с блоками в CSS",
                "Урок 12. Работа с графикой в CSS (часть 1)",
                "Урок 13. Работа с графикой в CSS (часть 2)",
                "Урок 14. Трансформация элементов в CSS",
                "Урок 15. Плавные переходы в CSS",
                "Урок 16. Правило @keyframes в CSS",
                "Урок 17. Знакомство с JavaScript",
                "Урок 18. Переменные в JavaScript",
                "Урок 19. Условный оператор if",
                "Урок 20. Взаимодействия в JavaScript",
                "Урок 21. Циклы в JavaScript",
                "Урок 22. Пишем игру 'Виселица'",
                "Урок 23. Функции в JavaScript",
                "Урок 24. DOM и jQuery",
                "Урок 25. Интерактивное программирование",
                "Урок 26. Пишем игру 'Найди клад'",
                "Урок 27. Объектно-ориентированное программирование",
                "Урок 28. Графика в JS",
                "Урок 29. Пишем игру 'Змейка' (часть 1)",
                "Урок 30. Пишем игру 'Змейка' (часть 2)"
        ]
        };

        // Добавляем пустую тему и Олимпиаду в списки тем
        for (let key in topics) {
            if (topics.hasOwnProperty(key)) {
                // Добавляем сначала пустую строку, потом "Олимпиада"
                topics[key].unshift("", "Олимпиада");
            }
        }


        // Найти все div с классом lesson
        const lessons = document.querySelectorAll('div.lesson');

        // Массив для хранения найденных элементов
        const foundLessons = [];

        // Пройти по всем элементам и проверить aria-label
        lessons.forEach(lesson => {
            const ariaLabel = lesson.getAttribute('aria-label');
            
            // Если aria-label содержит одно из значений из списка и не содержит "Отработка"
            if (ariaLabel && labels.some(label => ariaLabel.includes(label)) && !ariaLabel.includes('Отработка')) {
                foundLessons.push(ariaLabel);
            }
        });

        // Если найдены элементы, создать всплывающее окно
        if (foundLessons.length > 0) {
            // Создание модального окна
            const modal = document.createElement('div');
            modal.style.position = 'fixed';
            modal.style.top = '50%';
            modal.style.left = '50%';
            modal.style.transform = 'translate(-50%, -50%)';
            modal.style.backgroundColor = 'white';
            modal.style.border = '0px solid black';
            modal.style.padding = '0px';
            modal.style.zIndex = '1000';
            modal.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.5)';
            modal.style.maxWidth = '1080px'; // Установите максимальную ширину
            modal.style.maxHeight = '80vh'; // Установите максимальную высоту
            modal.style.overflowY = 'auto'; // Добавьте вертикальную прокрутку, если содержимое выходит за пределы

            // Создаем контейнер для заголовка
            const header = document.createElement('div');
            header.style.backgroundColor = '#4CAF50';  // Зеленый цвет фона
            header.style.padding = '10px';
            header.style.color = 'white';  // Белый текст заголовка
            header.style.width = '100%';   // Заголовок на всю ширину модального окна
            header.style.boxSizing = 'border-box';  // Включаем padding в расчёт ширины
            header.style.margin = '0';  // Убираем внешние отступы
            header.style.position = 'relative'; // Для позиционирования кнопки закрытия

            // Добавляем заголовок внутрь контейнера
            const title = document.createElement('span');
            title.innerText = 'Найденные занятия';
            title.style.margin = '0';  // Убираем отступы у заголовка
            title.style.fontSize = '25px';
            header.appendChild(title);

            // Создаем кнопку закрытия
            const closeButton = document.createElement('button');
            closeButton.innerHTML = '&times;'; // Символ крестика
            closeButton.style.backgroundColor = 'transparent'; // Прозрачный фон
            closeButton.style.color = 'white'; // Белый цвет текста
            closeButton.style.border = 'none'; // Убираем границу
            closeButton.style.fontSize = '40px'; // Размер шрифта
            closeButton.style.cursor = 'pointer'; // Курсор в виде указателя
            closeButton.style.position = 'absolute'; // Позиционирование
            closeButton.style.right = '10px'; // Отступ от правого края
            closeButton.style.top = '0px'; // Отступ от верхнего края
            closeButton.style.padding = '0'; // Убираем внутренние отступы

            // Добавляем обработчик события для закрытия модального окна
            closeButton.onclick = () => {
                document.body.removeChild(modal);
            };

            // Добавляем кнопку закрытия в заголовок
            header.appendChild(closeButton);

            // Вставляем заголовок перед основным содержимым модального окна
            modal.insertBefore(header, modal.firstChild);
                
            // Создание контейнера для таблицы
            const tableContainer = document.createElement('div');
            tableContainer.style.margin = '0px'; // Отступы от модального окна (вы можете изменить значение на нужное вам)

            // Создание таблицы
            const table = document.createElement('table');
            table.style.width = '100%';
            table.style.borderCollapse = 'collapse';

            // Создание заголовка таблицы
            const headerRow = document.createElement('tr');
            const headerCheckbox = document.createElement('th');
            headerCheckbox.innerText = 'ВЫБРАТЬ';
            headerCheckbox.style.textAlign = 'center';
            headerCheckbox.style.padding = '5px 0'; // Отступы сверху и снизу
            headerRow.appendChild(headerCheckbox);
            
            const headerLesson = document.createElement('th');
            headerLesson.innerText = 'ЗАНЯТИЕ';
            headerLesson.style.textAlign = 'center';
            headerLesson.style.padding = '5px 0'; // Отступы сверху и снизу
            headerRow.appendChild(headerLesson);

            const headerTopic = document.createElement('th');
            headerTopic.innerText = 'ВЫБОР ТЕМЫ';
            headerTopic.style.textAlign = 'center';
            headerTopic.style.padding = '5px 0'; // Отступы сверху и снизу
            headerRow.appendChild(headerTopic);

            table.appendChild(headerRow);

            // Добавление таблицы в контейнер
            tableContainer.appendChild(table);

            // Добавление контейнера с таблицей в модальное окно (предполагается, что modal уже создан)
            modal.appendChild(tableContainer);

            // Создание кнопки "Выделить все/Снять все"
            const toggleButton = document.createElement('button');
            toggleButton.innerText = 'Снять все';
            toggleButton.style.margin = '5px 0'; // Отступы сверху и снизу
            toggleButton.style.float = 'left'; // Выравнивание кнопки влево
            toggleButton.style.border = 'none'; // Убираем границы
            toggleButton.style.backgroundColor = 'white'; // Белый фон
            toggleButton.style.color = '#4CAF50'; // Зеленый цвет текста
            toggleButton.style.padding = '10px 15px'; // Паддинг для кнопки
            toggleButton.style.cursor = 'pointer'; // Курсор в виде указателя при наведении
            toggleButton.style.textTransform = 'uppercase'; // Преобразование текста в верхний регистр

            // Изменение стилей при наведении с помощью JavaScript
            toggleButton.addEventListener('mouseover', () => {
                toggleButton.style.backgroundColor = 'lightgray'; // Серый фон при наведении
            });

            toggleButton.addEventListener('mouseout', () => {
                toggleButton.style.backgroundColor = 'white'; // Возврат к белому фону
            });
            toggleButton.onclick = () => {
                const checkboxes = modal.querySelectorAll('input[type="checkbox"]');
                const allChecked = Array.from(checkboxes).every(cb => cb.checked);

                if (allChecked) {
                    // Если все чекбоксы отмечены, снять все
                    checkboxes.forEach(cb => {
                        cb.checked = false; // Снять отметку
                    });
                    toggleButton.innerText = 'Выделить все'; // Изменить текст кнопки
                } else {
                    // Если хотя бы один чекбокс не отмечен, выделить все
                    checkboxes.forEach(cb => {
                        cb.checked = true; // Отметить все
                    });
                    toggleButton.innerText = 'Снять все'; // Изменить текст кнопки
                }
            };
            modal.appendChild(toggleButton);

            // Создание главного выпадающего списка
            const mainSelect = document.createElement('select');
            mainSelect.style.width = '150px'; // Фиксированная ширина главного выпадающего списка
            mainSelect.style.margin = '5px 0'; // Отступы сверху и снизу
            mainSelect.style.float = 'right';
            mainSelect.style.height = '30px'; // Установка высоты
            mainSelect.style.border = '1px solid #ccc'; // Установка рамки
            mainSelect.style.borderRadius = '0'; // Установка радиуса рамки на 0, чтобы сделать прямоугольным
            mainSelect.style.padding = '2px'; // Установка внутреннего отступа
            mainSelect.style.overflow = 'hidden'; // Скрытие переполнения
            

            // Добавление пустой строки и "Олимпиада" как первые опции
            const emptyOption = document.createElement('option');
            emptyOption.value = '';
            emptyOption.textContent = '';
            mainSelect.appendChild(emptyOption);

            const olympiadOption = document.createElement('option');
            olympiadOption.value = 'Олимпиада';
            olympiadOption.textContent = 'Олимпиада';
            mainSelect.appendChild(olympiadOption);

            // Добавление опций к главному выпадающему списку
            for (let i = 1; i <= 30; i++) {
                const option = document.createElement('option');
                option.value = `Урок ${i}`;
                option.textContent = `Урок ${i}`;
                mainSelect.appendChild(option);
            }

            // Добавление главного селектора в модальное окно
            modal.appendChild(mainSelect);

            // Обработчик для синхронизации с остальными селекторами
            mainSelect.addEventListener('change', function () {
                const selectedIndex = this.selectedIndex; // Получаем индекс выбранной опции
                const selects = modal.querySelectorAll('select'); // Все селекторы, кроме главного
            
                selects.forEach(select => {
                    // Изменяем номер выбранной опции в каждом селекторе
                    if (select.options.length > selectedIndex) {
                        select.selectedIndex = selectedIndex; // Устанавливаем индекс выбранной опции
                    }
                });
            });


            // Заполнение таблицы найденными элементами
            foundLessons.forEach(lessonLabel => {
                const row = document.createElement('tr');
                
                // Создание чекбокса
                const checkboxCell = document.createElement('td');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = lessonLabel; // Установим значение чекбокса
                checkbox.checked = true; // Устанавливаем чекбокс как отмеченный

                // Стиль для чекбокса
                checkbox.style.width = '15px'; // Устанавливаем ширину
                checkbox.style.height = '15px'; // Устанавливаем высоту
                checkbox.style.transform = 'scale(1.5)'; // Увеличиваем размер чекбокса
                checkbox.style.margin = '0'; // Убираем внешние отступы
                checkbox.style.cursor = 'pointer'; // Указываем, что чекбокс кликабельный

                // Для стилизации зеленого фона чекбокса используем псевдоэлементы
                checkboxCell.style.position = 'relative'; // Устанавливаем относительное позиционирование
                checkboxCell.style.textAlign = 'center'; // Выравниваем чекбокс по центру

                checkboxCell.appendChild(checkbox); // Добавляем сам чекбокс
                row.appendChild(checkboxCell);
                
                // Название занятия
                const lessonCell = document.createElement('td');
                lessonCell.textContent = lessonLabel;
                lessonCell.style.padding = '2px 0'; // Отступы сверху и снизу
                row.appendChild(lessonCell);

                // Создание выпадающего списка тем
                const topicCell = document.createElement('td');
                const select = document.createElement('select');
                select.style.maxWidth = '150px'; // Установка максимальной ширины
                select.style.width = '100%'; // Установка ширины в 100%
                select.style.height = '30px'; // Установка высоты
                select.style.border = '1px solid #ccc'; // Установка рамки
                select.style.borderRadius = '0'; // Установка радиуса рамки на 0, чтобы сделать прямоугольным
                select.style.padding = '2px'; // Установка внутреннего отступа
                select.style.overflow = 'hidden'; // Скрытие переполнения
                const group = labels.find(label => lessonLabel.includes(label)); // Получаем группу
                
                if (topics[group]) {
                    topics[group].forEach(topic => {
                        const option = document.createElement('option');
                        option.value = topic;
                        option.textContent = topic;
                        select.appendChild(option);
                    });
                } else {
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = 'Нет тем';
                    select.appendChild(option);
                }

                topicCell.appendChild(select); // Добавить выпадающий список в ячейку
                row.appendChild(topicCell);

                table.appendChild(row);
            });
            modal.appendChild(table);


            // Добавить кнопку "Проставить темы"
            const applyTopicsButton = document.createElement('button');
            applyTopicsButton.innerText = 'Проставить темы';
            applyTopicsButton.style.margin = '5px 0'; // Отступы сверху и снизу
            applyTopicsButton.style.display = 'block'; // Установить отображение в блок
            applyTopicsButton.style.marginLeft = 'auto'; // Выравнивание по центру
            applyTopicsButton.style.marginRight = 'auto'; // Выравнивание по центру
            applyTopicsButton.style.border = 'none'; // Убираем границы
            applyTopicsButton.style.backgroundColor = 'white'; // Белый фон
            applyTopicsButton.style.color = '#4CAF50'; // Зеленый цвет текста
            applyTopicsButton.style.padding = '10px 15px'; // Паддинг для кнопки
            applyTopicsButton.style.cursor = 'pointer'; // Курсор в виде указателя при наведении
            applyTopicsButton.style.textTransform = 'uppercase'; // Преобразование текста в верхний регистр

            // Изменение стилей при наведении с помощью JavaScript
            applyTopicsButton.addEventListener('mouseover', () => {
                applyTopicsButton.style.backgroundColor = 'lightgray'; // Серый фон при наведении
            });

            applyTopicsButton.addEventListener('mouseout', () => {
                applyTopicsButton.style.backgroundColor = 'white'; // Возврат к белому фону
            });

            applyTopicsButton.onclick = async () => {
                applyTopicsButton.disabled = true;
                applyTopicsButton.style.cursor = 'not-allowed'; // Меняем курсор на неразрешенный
                applyTopicsButton.style.color = '#999'; // Меняем цвет текста на серый
                applyTopicsButton.innerText = 'ТЕМЫ ПРОСТАВЛЯЮТСЯ...'; // Изменяем текст кнопки
                // Получить все строки таблицы
                const rows = Array.from(table.querySelectorAll('tr'));

                for (const row of rows) {
                    const checkbox = row.querySelector('input[type="checkbox"]');
                    // Если чекбокс отмечен
                    if (checkbox && checkbox.checked) {
                        const lessonLabel = row.cells[1].textContent;  // Название занятия из второго столбца
                        const select = row.cells[2].querySelector('select');  // Выпадающий список тем из третьего столбца
                        const newTopic = select ? select.value : null;  // Получить выбранную тему

                        if (newTopic !== null && newTopic !== undefined) {
                            try {
                                // Вызвать функцию для проставления темы
                                await new Promise(resolve => setTimeout(resolve, 2000));
                                await setLessonTopic(lessonLabel, newTopic);
                                // Если тема успешно проставлена, зачеркнуть строку
                                row.style.textDecoration = 'line-through';
                            } catch (error) {
                                console.error(`Ошибка при проставлении темы для ${lessonLabel}: ${error}`);
                            }
                        }
                    }
                }
                // После завершения обработки
                applyTopicsButton.disabled = false; // Возвращаем кнопку в активное состояние
                applyTopicsButton.style.cursor = 'pointer'; // Возвращаем курсор
                applyTopicsButton.style.color = '#4CAF50'; // Возвращаем цвет текста на зеленый
                applyTopicsButton.innerText = 'ГОТОВО'; // Изменяем текст кнопки

                // Теперь меняем функционал кнопки на закрытие модального окна
                applyTopicsButton.onclick = () => {
                    document.body.removeChild(modal); // Закрываем модальное окно
                };
            };

            // Добавить кнопку в модальное окно
            modal.appendChild(applyTopicsButton);

            // Функция для повторного поиска элемента с ожиданием
            async function waitForElement(selector, timeout = 10000, interval = 200) {
                const endTime = Date.now() + timeout;

                while (Date.now() < endTime) {
                    const element = document.querySelector(selector);
                    if (element) {
                        return element;
                    }
                    // Ждем перед повторной проверкой
                    await new Promise(resolve => setTimeout(resolve, interval));
                }

                throw new Error(`Элемент с селектором "${selector}" не найден в течение ${timeout / 1000} секунд.`);
            }

            async function setLessonTopic(lessonLabel, newTopic) {
                return new Promise(async (resolve, reject) => {
                    try {
                        // 1. Найти div с атрибутом aria-label, равным lessonLabel, и нажать на него
                        const lessonDiv = await waitForElement(`div.lesson[aria-label="${lessonLabel}"]`);
                        lessonDiv.click();

                        // Подождать пока загрузится окошко
                        await new Promise(resolve => setTimeout(resolve, 200)); // Ждем полсекунды перед следующим шагом

                        // 2. Найти кнопку с ng-click="$ctrl.editLesson()" и нажать на нее
                        const editButton = await waitForElement('button[ng-click="$ctrl.editLesson()"]');
                        editButton.click();

                        // Подождать пока загрузится следующее окошко
                        await new Promise(resolve => setTimeout(resolve, 200));

                        // 3. Найти поле ввода темы (textarea) и вставить новый текст
                        const topicTextarea = await waitForElement('textarea[ng-model="$ctrl.lesson.topic"]');
                        topicTextarea.value = '';  // Очистить текстовое поле
                        topicTextarea.value = newTopic;  // Установить новую тему

                        // Программно вызвать событие "input" для обновления связанного Angular компонента
                        const event = new Event('input', { bubbles: true });
                        topicTextarea.dispatchEvent(event);

                        // 4. Найти кнопку с ng-click="$ctrl.save()" и нажать на нее
                        const saveButton = await waitForElement('button[ng-click="$ctrl.save()"]');
                        saveButton.click();

                        // Подождать сохранения и закрытия панели
                        await new Promise(resolve => setTimeout(resolve, 1000)); // Ждем 1 секунду для завершения сохранения

                        // 5. Нажать кнопку с ng-click="$ctrl.closePanel()"
                        const closeButton = await waitForElement('button[ng-click="$ctrl.closePanel()"]');
                        closeButton.click();

                        console.log(`Тема для занятия "${lessonLabel}" успешно установлена.`);
                        resolve();
                    } catch (error) {
                        console.error(`Ошибка при установке темы для "${lessonLabel}": ${error.message}`);
                        reject();
                    }
                });
            }

            // Добавление модального окна на страницу
            document.body.appendChild(modal);

            console.log('Модальное окно с таблицей найденных элементов и выпадающими списками тем создано');
        } else {
            console.log('Элементы не найдены');
        }

    }

    // Функция для добавления кнопки в элемент с классом mc-sidebar-footer
    function addButtonToSidebarFooter() {
        const sidebarFooter = document.querySelector('.mc-sidebar-footer');

        if (sidebarFooter) {
            // Проверка на существование кнопки
            if (!document.querySelector('.custom-sidebar-button')) {
                const button = document.createElement('button');
                button.className = 'custom-sidebar-button'; // Добавляем класс для кнопки

                button.innerHTML = `
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 4px;">
                        <path d="M21 20.9998H13M2.5 21.4998L8.04927 19.3655C8.40421 19.229 8.58168 19.1607 8.74772 19.0716C8.8952 18.9924 9.0358 18.901 9.16804 18.7984C9.31692 18.6829 9.45137 18.5484 9.72028 18.2795L21 6.99982C22.1046 5.89525 22.1046 4.10438 21 2.99981C19.8955 1.89525 18.1046 1.89524 17 2.99981L5.72028 14.2795C5.45138 14.5484 5.31692 14.6829 5.20139 14.8318C5.09877 14.964 5.0074 15.1046 4.92823 15.2521C4.83911 15.4181 4.77085 15.5956 4.63433 15.9506L2.5 21.4998ZM2.5 21.4998L4.55812 16.1488C4.7054 15.7659 4.77903 15.5744 4.90534 15.4867C5.01572 15.4101 5.1523 15.3811 5.2843 15.4063C5.43533 15.4351 5.58038 15.5802 5.87048 15.8703L8.12957 18.1294C8.41967 18.4195 8.56472 18.5645 8.59356 18.7155C8.61877 18.8475 8.58979 18.9841 8.51314 19.0945C8.42545 19.2208 8.23399 19.2944 7.85107 19.4417L2.5 21.4998Z" stroke="pink" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Темы
                `;

                // Устанавливаем стили для кнопки
                button.style.border = 'none';
                button.style.backgroundColor = 'transparent';
                button.style.color = 'pink';
                button.style.padding = '10px 0';
                button.style.cursor = 'pointer';
                button.style.fontSize = '14px';
                button.style.width = '100%';
                button.style.display = 'flex';
                button.style.alignItems = 'center';
                button.style.justifyContent = 'center';

                button.addEventListener('mouseenter', () => {
                    button.style.backgroundColor = 'gray';
                    button.style.color = '#f0f0f0';
                    button.querySelector('svg path').setAttribute('stroke', '#f0f0f0');
                });

                button.addEventListener('mouseleave', () => {
                    button.style.backgroundColor = 'transparent';
                    button.style.color = 'pink';
                    button.querySelector('svg path').setAttribute('stroke', 'pink');
                });

                button.addEventListener('click', openTopicsModalWindow);

                sidebarFooter.insertBefore(button, sidebarFooter.firstChild);
            }
        } else {
            console.error('Элемент <div class="mc-sidebar-footer"> не найден.');
        }
    }

    // Ожидание полной загрузки страницы
    window.addEventListener('load', () => {
        setTimeout(addButtonToSidebarFooter, 1000); // Задержка на 1 секунду для полного прогрузки
    });
})();
